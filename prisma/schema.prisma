// Integrated Prisma Schema for Resume Tailor
// Combines Authentication + Resume Features
// Database: SQLite for local development

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===== Authentication Models (NextAuth.js) =====

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?   // For credentials auth
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication relations
  accounts Account[]
  sessions Session[]

  // Application relations
  resumes  Resume[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== Application Models (Resume Tailor) =====

model Resume {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Structured resume data as JSON (matches PRD schema)
  data         String        // JSON stored as text in SQLite
  template     String        @default("classic")

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  applications Application[]

  @@index([userId])
  @@index([createdAt])
}

model JobDescription {
  id              String        @id @default(cuid())
  companyName     String?
  roleTitle       String?
  employerWebsite String?
  description     String        // TEXT type

  createdAt       DateTime      @default(now())
  applications    Application[]
}

model Application {
  id                String         @id @default(cuid())
  resumeId          String
  resume            Resume         @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  jobDescriptionId  String
  jobDescription    JobDescription @relation(fields: [jobDescriptionId], references: [id], onDelete: Cascade)

  // AI-tailored resume data
  tailoredResume    String        // JSON stored as text

  // Generated cover letter
  coverLetter       String?       // TEXT type

  status            String        @default("draft") // draft, applied, etc.
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([resumeId])
  @@index([jobDescriptionId])
}

enum Role {
  USER
  ADMIN
}
